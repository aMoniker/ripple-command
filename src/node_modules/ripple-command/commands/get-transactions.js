'use strict';

const program = require('commander');
const {Command} = require('ripple-command/command');

program
    .command('get-transactions <address>')

    .description('Retrieves historical transactions of an account. This can take a long time without specifying --limit')

    // TODO - add array handling for options
    // .option('--types <types>', 'Only return transactions of the specified types.')

    .option('--binary',
        'Output transactions in condensed binary format rather than JSON.')

    .option('--limit <int>',
        'Return at most this many transactions.')

    .option('--counterparty <address>',
        'Only return transactions with this account as a counterparty to the transaction.')

    .option('--earliest-first',
        'Sort transactions so that the earliest ones come first. By default, the newest transactions come first.')

    .option('--exclude-failures',
        'The result will omit transactions that did not succeed.')

    .option('--initiated',
        'Return only transactions initiated by the account specified by address. If false, return only transactions not initiated by the account specified by address.')

    .option('--max-ledger-version <int>',
        'Return only transactions in this ledger version or lower.')

    .option('--min-ledger-version <int>',
        'Return only transactions in this ledger verion or higher.')

    .option('--start <id>',
        'The transaction to start from.')

    .action(Command.actionHandler({
        apiCall: 'getTransactions',
        optionsMap: {
            'int': ['limit', 'maxLedgerVersion', 'minLedgerVersion'],
        },
    }))
;
