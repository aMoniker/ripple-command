'use strict';

var _ = require('lodash');
var program = require('commander');
var {Config} = require('ripple-command/config');
var {Console} = require('ripple-command/console');
var {Util} = require('ripple-command/util');
var {RippleWrapper} = require('ripple-command/api/ripple-wrapper');

program
    .command('get-transactions <address>')
    .description('Retrieves historical transactions of an account. This can take a long time without specifying --limit')
    .option('--binary', 'Output transactions in condensed binary format rather than JSON.')
    .option('--limit <int>', 'Return at most this many transactions.')
    .option('--counterparty <address>', 'Only return transactions with this account as a counterparty to the transaction.')
    .option('--earliest-first', 'Sort transactions so that the earliest ones come first. By default, the newest transactions come first.')
    .option('--exclude-failures', 'The result will omit transactions that did not succeed.')
    .option('--initiated', 'Return only transactions initiated by the account specified by address. If false, return only transactions not initiated by the account specified by address.')
    .option('--max-ledger-version <int>', 'Return only transactions in this ledger version or lower.')
    .option('--min-ledger-version <int>', 'Return only transactions in this ledger verion or higher.')
    .option('--start <id>', 'The transaction to start from.')
    // TODO - add array handling for options
    // .option('--types <types>', 'Only return transactions of the specified types.')
    .action(function(address, command) {
        let opts = command.opts();
        Config.absorb(program.opts(), opts);

        let options = _.pickBy(opts, (value) => {
            return value !== undefined;
        });

        for (let intOpt of ['limit', 'maxLedgerVersion', 'minLedgerVersion']) {
            if (options[intOpt]) {
                options[intOpt] = parseInt(options[intOpt], 10);
            }
        }

        (new RippleWrapper()).invoke('getTransactions', address, options).then((txs) => {
            Console.out('Transactions:');
            Console.out(txs, 1);
        }).catch(_.noop);
    })
    ;
