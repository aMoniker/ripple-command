'use strict'

require('dotenv').config(); // load .env vars into process.env

var program = require('commander');
var {Config} = require('ripple-command/config');
var {Console} = require('ripple-command/console');
var {Commands} = require('ripple-command/api/commands');
var {RippleWrapper} = require('ripple-command/api/ripple-wrapper');
var p = require('../../../package.json');

program
    .version(p.version)
    .option('-s, --server <address>', `The websocket address of the ripple server to transact against. Defaults to "${Config.getDefault('server')}"`)
    .option('-o, --offline', 'Use offline mode, which will not send any transactions. Only certain commands are available in offline mode.')
    .option('--debug', 'Run in debug mode, which outputs extra information.')
    ;

program
    .command('list')
    .alias('l')
    .description('list all possible commands')
    .action(function(cmd, options) {
        Console.out('Commands:');
        Console.out(Commands.all, 1);
    })
    ;

program
    .command('generate-address')
    .option('--algorithm <type>', 'The digital signature algorithm to generate an address for. Can be "ecdsa-secp256k1" (default) or "ed25519"')
    .option('--entropy <integers>', 'A comma-separated list of 16 integers used to generate the seed.')
    .description('generate a new address and secret - can be done offline')
    .action(function(cmd, options) {
        Config.absorb(program.opts(), cmd.opts());
        Console.out('New wallet address:');
        (new RippleWrapper()).invoke('generateAddress').then((address) => {
            Console.out(address, 1);
        });
    })
    ;

console.log(''); // extra line for readability
program.parse(process.argv);

if (!program.args.length) { program.help(); }
