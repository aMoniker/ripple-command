'use strict';

const {Config} = require('ripple-command/config');

class RippleWrapper {

    constructor() {
        var options = {};
        this.offline = !!Config.get('offline');

        if (!this.offline) {
            options.server = Config.get('server');
        }

        const {RippleAPI} = require('ripple-lib');
        this.api = new RippleAPI(options);

        this.api.on('error', this._apiError)
                .on('connected', this._apiConnected)
                .on('disconnected', this._apiDisconnected)
                ;
    }

    invoke(method, ...args) {
        if (this.offline) {
            return new Promise((resolve, reject) => {
                resolve(this.api[method].apply(args));
            });
        } else {
            return new Promise((resolve, reject) => {
                this.api.connect().then(() => {
                    resolve(this.api[method].apply(this.api, args));
                }).then(() => {
                    return this.api.disconnect();
                }).catch((error) => {
                    console.error(error);
                });
            });
        }
    }

    _apiConnected() {
        // console.log('connected');
    }

    _apiDisconnected(code) {
        // TODO - handle the code and format this nicely
        // code - [close code](https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent) sent by the server
        // will be 1000 if this was normal closure
        // console.log('disconnected, code:', code);
    }

    _apiError(errorCode, errorMessage) {
        console.log('error');
        console.log(errorCode + ': ' + errorMessage);
    }

}

module.exports = {
    RippleWrapper,
};


