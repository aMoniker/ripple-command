'use strict';

const winston = require('winston');
const {Config} = require('ripple-command/config');
const {Console} = require('ripple-command/console');

class RippleWrapper {

    /**
     * Create a new interface to the RippleAPI.
     */
    constructor() {
        var options = {};
        this.offline = !!Config.get('offline');

        if (!this.offline) {
            options.server = Config.get('server');
        }

        const {RippleAPI} = require('ripple-lib');
        this.api = new RippleAPI(options);

        this.api.on('error', this._apiError)
                .on('connected', this._apiConnected)
                .on('disconnected', this._apiDisconnected)
                ;
    }

    /**
     * Call the given RippleAPI method using the args.
     *
     * @param  {string}    method The RippleAPI method
     * @param  {...mixed}  args
     * @return Promise
     */
    invoke(method, ...args) {
        let mode = this.offline ? 'offline' : 'online';
        var log_message = `Calling API method ${method} in ${mode} mode.`;

        // TODO - add whitelist of working offline API methods
        if (this.offline) {
            return new Promise((resolve, reject) => {
                winston.log('debug', log_message);
                resolve(this.api[method].apply(args));
            });
        } else {
            return new Promise((resolve, reject) => {
                this.api.connect().then(() => {
                    winston.log('debug', log_message);
                    return this.api[method].apply(this.api, args).then((result) => {
                        resolve(result);
                    });
                }).then(() => {
                    return this.api.disconnect();
                }).catch((error) => {
                    this.api.isConnected() && this.api.disconnect();
                    let error_message = `API Error: ${error}`;
                    winston.log('error', error_message);
                    Console.out(error_message);
                    reject(error);
                });
            });
        }
    }

    /**
     * Handles the API connect event.
     */
    _apiConnected() {
        winston.log('debug', 'API connected');
    }

    /**
     * Handles the API disconnect event.
     *
     * The code will be 1000 if this was normal closure.
     * See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
     *
     * @param  {int} code
     */
    _apiDisconnected(code) {
        winston.log('debug', `API disconnected. Code: ${code}`);
    }

    /**
     * Handles the API error event.
     *
     * @param  {int} errorCode
     * @param  {string} errorMessage
     */
    _apiError(errorCode, errorMessage) {
        let message = `API connection error: (${errorCode}) ${errorMessage}`;
        winston.log('error', message);
        Console.out(message);
    }

}

module.exports = {
    RippleWrapper,
};


