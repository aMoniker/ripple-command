'use strict';

var _ = require('lodash');

const defaults = {
    server: 'wss://s1.ripple.com',
    offline: false,
};

/**
 * Simple utility for handling configuration setting across the application.
 */
class Config {

    /**
     * Fill in the first config with the default values defined above.
     */
    constructor() {
        this.config = _.extend({}, defaults);
    }

    /**
     * Get a value from the current config.
     *
     * @param  {string} name
     * @return {mixed}
     */
    get(name) {
        return this.config[name];
    }

    /**
     * Get a default value, as defined in the defaults constant.
     *
     * @param  {string} name
     * @return {mixed}
     */
    getDefault(name) {
        return defaults[name];
    }

    /**
     * Set a given config value.
     *
     * @param {string} name
     * @param {mixed} value
     */
    set(name, value) {
        this.config[name] = value;
    }

    /**
     * Absorb any number of object-based configurations into
     * the current configuration.
     *
     * Each variadic argument should be an object representing a config setting
     * in the format of key:value
     *
     * Undefined values will be ignored.
     *
     * @param  {...[object, ...]} options
     */
    absorb(...options) {
        options = options.map((obj, key) => {
            return _.pickBy(obj, (v, k) => {
                return v !== undefined;
            });
        });
        options.unshift(this.config);
        this.config = _.extend.apply(null, options);
    }

}

module.exports = {
    Config: new Config(),
};
