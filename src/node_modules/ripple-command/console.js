'use strict';

var _ = require('lodash');
var {Config} = require('ripple-command/config');

class Console {

    constructor() {
        this.spacer = '  ';
        this.spacers = 2;
    }

    /**
     * Simple formatting for console output.
     *
     * If more than one arg is specified, and the last arg is an integer,
     * then that number of indentation spaces will be added to the output.
     *
     * @param  {...mixed} args any number of args to log (last being an int for spacing)
     */
    out(...args) {
        // default number of times to print the spacer before each line
        var spacers = this.spacers;

        // pass an integer as the last argument to add spacers to the default
        if (args.length > 1 && _.isInteger(args[args.length - 1])) {
            spacers += args.pop();
        }

        // output based on arg type
        for (let arg of args) {
            if (_.isArray(arg)) {
                _.each(arg, (a) => {
                    this.out.apply(this, [a, spacers]);
                });
            } else if (_.isPlainObject(arg)) {
                _.each(arg, (v, k) => {
                    let value = _.isObject(v) ? JSON.stringify(v) : v;
                    this.out_string(`${k}: ${value}`, spacers);
                })
            } else if (_.isFunction(arg)) {
                this.out(arg());
            } else {
                this.out_string(arg, spacers);
            }
        }
    }

    /**
     * Insert the right number of spaces and call the actual console.log()
     *
     * @param  {string} string
     * @param  {int}    spacers
     */
    out_string(string, spacers = null) {
        spacers = spacers || this.spacers;
        console.log(this.spacer.repeat(spacers) + string);
    }

}

module.exports = {
    Console: new Console,
};
