'use strict';

const _ = require('lodash');
const program = require('commander');
const {Config} = require('ripple-command/config');
const {Console} = require('ripple-command/console');
const {RippleWrapper} = require('ripple-command/api/ripple-wrapper');

var typeMappers = {
    int   : (v) => { return parseInt(v, 10); },
    float : (v) => { return parseFloat(v, 10); },
};

class Command {

    static actionHandler(handlerOptions) {
        return (...args) => {
            // the command object will always be the last arg,
            // all preceding args are arguments to the API call
            let command = args.pop();
            let opts = command.opts();

            // add the flags to the current config
            Config.absorb(program.opts(), opts);

            // ignore undefined options
            var options = _.pickBy(opts, (value) => {
                return value !== undefined;
            });

            // mapping table
            if (handlerOptions.optionsMap) {
                _.each(handlerOptions.optionsMap, (optionNames, type) => {
                    if (!typeMappers[type]) { return; }
                    for (let optionName of optionNames) {
                        if (options[optionName] !== undefined) {
                            options[optionName] = typeMappers[type](options[optionName]);
                        }
                    }
                });
            }

            let apiArguments = args.concat([options]);

            // custom arg/option mapping
            if (handlerOptions.customMapping && _.isFunction(handlerOptions.customMapping)) {
                apiArguments = handlerOptions.customMapping(apiArguments);
            }

            // make the API call and output the result
            let rw = new RippleWrapper();
            rw.invoke.apply(
                rw, [handlerOptions.apiCall].concat(apiArguments)
            ).then((response) => {
                Console.out(response, 1);
            }).catch(_.noop);
        };
    }

    static collectOption(value, memo) {
        memo = memo || [];
        memo.push(value);
        return memo;
    }

}

module.exports = {
    Command
};
